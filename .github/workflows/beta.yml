# This flow is designed to be used to update the beta track on the Play store. It does this by promoting the internal track build to beta, triggered by the creation of a beta tag.
# Crucially, it assumes that whatever is the current internal track build is the correct candidate for sending to beta - it does *not* rebuild and publish. Therefore, if changes
# are made and a new beta tag created at the same time, those changes will *not* be included in the build that the beta track ends up pointing at. I get around this by 
# making sure changes are published to internal first, then creating / pushing the beta tag in order to promote. I should also fix this at some point.
name: Android CI Beta release

on:
  push:
    tags:
      - Android-v.[0-9]+.[0-9]+.[0-9]+-beta[0-9]+

jobs:
  promote:
    name: Create GH release and promote Play store internal to Beta
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        body_path: ./CHANGELOG.md
        release_name: ${{ github.ref }}
        draft: true
        prerelease: true
    - name: set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Decrypt secrets
      env:
        GOOGLE_CLOUD_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_CREDENTIALS }}
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        echo -n $GOOGLE_CLOUD_SERVICE_ACCOUNT_CREDENTIALS > project/app/owntracks-android-7a8e1517bde3.json
        echo -n $KEYSTORE_BASE64 | base64 -d > project/owntracks.release.keystore.jks
    - name: Build APK
      run: ./gradlew assembleRelease
      working-directory: project
      env:
        KEYSTORE_PASSPHRASE: ${{ secrets.KEYSTORE_PASSPHRASE }}
        ORG_GRADLE_PROJECT_google_maps_api_key: ${{ secrets.GOOGLE_MAPS_API_KEY }}
    - name: Upload GMS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./project/app/build/outputs/apk/gms/release/app-gms-release.apk
        asset_name: owntracks-release-gms.apk
        asset_content_type: application/vnd.android.package-archive
    - name: Upload OSS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./project/app/build/outputs/apk/oss/release/app-oss-release.apk
        asset_name: owntracks-release-oss.apk
        asset_content_type: application/vnd.android.package-archive
    - name: Promote play store beta from internal
      run: ./gradlew promoteArtifact --from-track internal --promote-track beta --release-status completed
      working-directory: project
