---
name: Build and Test

"on":
  pull_request:
    types:
      - labeled
      - synchronize
  push:
    paths:
      - ".github/workflows/build-and-test.yml"
      - "project/app/src/**"
      - "project/app/*.pro"
      - "project/buildSrc/src/**"
      - "project/*.gradle.kts"
      - "project/gradle/wrapper/gradle-wrapper.properties"
    branches:
      - master
      - gh-readonly-queue/master/**

jobs:
  build-test-lint:
    name: Build, test & lint
    runs-on: self-hosted
    permissions:
      contents: read
      checks: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
      - name: Create keystore
        run: |
          echo -n $KEYSTORE_BASE64 | base64 -d > project/owntracks.release.keystore.jks
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      - name: Gradle build
        uses: gradle/gradle-build-action@v2
        with:
          build-root-directory: project
          arguments: |
            assembleDebug
            assembleRelease
            assembleAndroidTest
            assembleGmsReleaseUnitTest
            :app:compileOssReleaseSources
            :app:packageGmsReleaseBundle
            :app:assembleGmsDebugAndroidTest
            :app:assembleOssDebugAndroidTest
            :app:packageGmsDebugAndroidTest
            :app:packageOssDebugAndroidTest
            lint
            app:createGmsDebugUnitTestCoverageReport --scan --stacktrace
        env:
          KEYSTORE_PASSPHRASE: ${{ secrets.KEYSTORE_PASSPHRASE }}

      - name: Upload apk artifact
        uses: actions/upload-artifact@v3
        with:
          name: apks
          path: |
            project/app/build/outputs/apk/oss/release/app-oss-release.apk
            project/app/build/outputs/apk/gms/release/app-gms-release.apk

      - name: Upload coverage
        if: ${{ (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'integration-test-required')) || (github.event_name == 'push' && github.ref == 'refs/heads/master') }}
        uses: codecov/codecov-action@v3
        with:
          files: ./project/app/build/reports/coverage/test/gms/debug/report.xml
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: JUnit Report Action
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: "**/build/test-results/test*UnitTest/TEST-*.xml"

      - name: Upload lint report
        uses: actions/upload-artifact@v3
        with:
          name: lint-report
          path: project/app/build/reports/lint-results-gmsDebug.html
        if: always()

  fdroid-scanner:
    name: F-Droid scanner
    runs-on: ubuntu-latest
    needs: build-test-lint
    container:
      image: registry.gitlab.com/fdroid/docker-executable-fdroidserver:master
    steps:
      - name: Download APK
        uses: actions/download-artifact@v3
        with:
          name: apks
      - name: Scan OSS APK
        run: |
          . /etc/profile.d/bsenv.sh && GRADLE_USER_HOME=${home_vagrant}/.gradle ${fdroidserver}/fdroid scanner oss/release/app-oss-release.apk

  espresso-test:
    name: "Espresso test"
    runs-on: self-hosted
    permissions:
      contents: read
      checks: write
    needs: build-test-lint
    strategy:
      matrix:
        android-api: [31]
    steps:
      - run: echo "/android-sdk/platform-tools/" >> $GITHUB_PATH
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      - name: "Check snapshot exists"
        id: check_snapshot_exists
        uses: andstor/file-existence-action@v2
        with:
          files: "/android-sdk/user_home/avd/test-${{ matrix.android-api }}.avd/snapshots/default_boot/screenshot.png"

      - name: Create AVD and generate snapshot for caching
        if: steps.check_snapshot_exists.outputs.files_exists == 'false'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.android-api }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none
          profile: pixel_3a
          target: google_apis
          ram-size: 6000M
          avd-name: test-${{ matrix.android-api }}
          disable-animations: true
          arch: x86_64
          sdcard-path-or-size: 1000M
          script: |
            echo "Created AVD snapshot"

      - name: Espresso Test
        uses: reactivecircus/android-emulator-runner@v2
        timeout-minutes: 60
        env:
          TEST_OPTIONS: ${{ contains(github.event.pull_request.labels.*.name, 'smoke-test-required') && '-Pandroid.testInstrumentationRunnerArguments.annotation=org.owntracks.android.testutils.SmokeTest' || '' }}
        with:
          api-level: ${{ matrix.android-api }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none
          profile: pixel_3a
          target: google_apis
          ram-size: 6000M
          disable-animations: true
          arch: x86_64
          cores: 2
          sdcard-path-or-size: 1000M
          emulator-build: 9936625
          script: |
            adb logcat -d > emulator-startup.log
            adb shell settings put global bluetooth_on 0
            adb shell rm -rf /sdcard/googletest || echo "Couldn't delete googletest folder"
            adb uninstall org.owntracks.android.debug || echo "org.owntracks.android not installed"
            adb uninstall org.owntracks.android.debug.test || echo "org.owntracks.android.test not installed"
            adb logcat -c
            adb logcat > emulator.log & echo $! > logcat_file.pid
            adb logcat "*:S MonitoringInstr:V AndroidJUnitRunner:V TestRequestBuilder:V TestExecutor:V TestRunner:V" --format=color & echo $! > logcat_console.pid
            echo 0 > gradle.exit # Set a default exit code.
            ./project/gradlew -p project createGmsDebugCoverageReport $TEST_OPTIONS --max-workers=1 --stacktrace --scan --no-daemon || echo $? > gradle.exit
            # Stop capturing logcat output.
            kill $(cat logcat_file.pid)    || echo "::warning file=.github/workflows/ci.yml::Logcat process $(cat logcat_file.pid) didn't exist."
            kill $(cat logcat_console.pid) || echo "::warning file=.github/workflows/ci.yml::Logcat process $(cat logcat_console.pid) didn't exist."
            adb logcat -d --buffer=crash --format=color
            exit $(cat gradle.exit)

      - name: Upload logcat
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logcat-${{ matrix.android-api }}
          path: |            
            ${{ github.workspace }}/emulator.log
            ${{ github.workspace }}/emulator-startup.log

      - name: Upload connected test result artifact
        uses: actions/upload-artifact@v3
        with:
          name: espresso-test-reports-${{ matrix.android-api }}
          path: ./project/app/build/reports/androidTests/connected/
        if: always()
      - name: Espresso JUnit Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: app/build/outputs/androidTest-results/connected/*.xml
      - name: Upload connected test coverage artifact
        uses: actions/upload-artifact@v3
        with:
          name: espresso-test-coverage-${{ matrix.android-api }}
          path: ./project/app/build/reports/coverage/androidTest/
        if: always()
      - name: Upload coverage
        if: ${{ (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'integration-test-required')) || (github.event_name == 'push' && github.ref == 'refs/heads/master') }}
        uses: codecov/codecov-action@v3
        with:
          files: ./project/app/build/reports/coverage/androidTest/gms/debug/connected/report.xml
          flags: uitests
          token: ${{ secrets.CODECOV_TOKEN }}

  publish-to-play-store:
    name: "Publish to Play Store"
    runs-on: self-hosted
    permissions:
      contents: read
      checks: write
    needs: espresso-test
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
      - name: Create keystore
        run: |
          echo -n $KEYSTORE_BASE64 | base64 -d > project/owntracks.release.keystore.jks
          echo -n $GOOGLE_CLOUD_SERVICE_ACCOUNT_CREDENTIALS > project/app/owntracks-android-gcloud-creds.json
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          GOOGLE_CLOUD_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_CREDENTIALS }}
      - name: Gradle build
        uses: gradle/gradle-build-action@v2
        with:
          build-root-directory: project
          arguments: |
            publishGmsReleaseBundle