package org.owntracks.android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.owntracks.android.db.ContactLink;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONTACT_LINK.
*/
public class ContactLinkDao extends AbstractDao<ContactLink, Long> {

    public static final String TABLENAME = "CONTACT_LINK";

    /**
     * Properties of entity ContactLink.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Topic = new Property(1, String.class, "topic", false, "TOPIC");
        public final static Property ContactId = new Property(2, Long.class, "contactId", false, "CONTACT_ID");
        public final static Property ModeId = new Property(3, int.class, "modeId", false, "MODE_ID");
    };


    public ContactLinkDao(DaoConfig config) {
        super(config);
    }
    
    public ContactLinkDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONTACT_LINK' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TOPIC' TEXT NOT NULL ," + // 1: topic
                "'CONTACT_ID' INTEGER," + // 2: contactId
                "'MODE_ID' INTEGER NOT NULL );"); // 3: modeId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_CONTACT_LINK_TOPIC_MODE_ID ON CONTACT_LINK" +
                " (TOPIC,MODE_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONTACT_LINK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ContactLink entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTopic());
 
        Long contactId = entity.getContactId();
        if (contactId != null) {
            stmt.bindLong(3, contactId);
        }
        stmt.bindLong(4, entity.getModeId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ContactLink readEntity(Cursor cursor, int offset) {
        ContactLink entity = new ContactLink( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // topic
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // contactId
            cursor.getInt(offset + 3) // modeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ContactLink entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTopic(cursor.getString(offset + 1));
        entity.setContactId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setModeId(cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ContactLink entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ContactLink entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
