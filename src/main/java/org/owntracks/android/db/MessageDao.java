package org.owntracks.android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.owntracks.android.db.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MESSAGE.
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ExternalId = new Property(1, String.class, "externalId", false, "EXTERNAL_ID");
        public final static Property Tst = new Property(2, Long.class, "tst", false, "TST");
        public final static Property ExpiresTst = new Property(3, Long.class, "expiresTst", false, "EXPIRES_TST");
        public final static Property Channel = new Property(4, String.class, "channel", false, "CHANNEL");
        public final static Property Sender = new Property(5, String.class, "sender", false, "SENDER");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(7, String.class, "description", false, "DESCRIPTION");
        public final static Property Icon = new Property(8, String.class, "icon", false, "ICON");
        public final static Property Priority = new Property(9, Integer.class, "priority", false, "PRIORITY");
        public final static Property IconUrl = new Property(10, String.class, "iconUrl", false, "ICON_URL");
        public final static Property Url = new Property(11, String.class, "url", false, "URL");
    };


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'EXTERNAL_ID' TEXT UNIQUE ," + // 1: externalId
                "'TST' INTEGER," + // 2: tst
                "'EXPIRES_TST' INTEGER," + // 3: expiresTst
                "'CHANNEL' TEXT," + // 4: channel
                "'SENDER' TEXT," + // 5: sender
                "'TITLE' TEXT," + // 6: title
                "'DESCRIPTION' TEXT," + // 7: description
                "'ICON' TEXT," + // 8: icon
                "'PRIORITY' INTEGER," + // 9: priority
                "'ICON_URL' TEXT," + // 10: iconUrl
                "'URL' TEXT);"); // 11: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String externalId = entity.getExternalId();
        if (externalId != null) {
            stmt.bindString(2, externalId);
        }
 
        Long tst = entity.getTst();
        if (tst != null) {
            stmt.bindLong(3, tst);
        }
 
        Long expiresTst = entity.getExpiresTst();
        if (expiresTst != null) {
            stmt.bindLong(4, expiresTst);
        }
 
        String channel = entity.getChannel();
        if (channel != null) {
            stmt.bindString(5, channel);
        }
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(6, sender);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(9, icon);
        }
 
        Integer priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(10, priority);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(11, iconUrl);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(12, url);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // externalId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // tst
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // expiresTst
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // channel
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sender
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // description
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // icon
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // priority
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // iconUrl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExternalId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTst(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setExpiresTst(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setChannel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSender(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIcon(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPriority(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setIconUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
