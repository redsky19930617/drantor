package st.alr.mqttitude.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table CONTACT_LINK.
 */
public class ContactLinkDao extends AbstractDao<ContactLink, String> {

	public static final String TABLENAME = "CONTACT_LINK";

	/**
	 * Properties of entity ContactLink.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Topic = new Property(0, String.class,
				"topic", true, "TOPIC");
		public final static Property ContactId = new Property(1, long.class,
				"contactId", false, "CONTACT_ID");
	};

	public ContactLinkDao(DaoConfig config) {
		super(config);
	}

	public ContactLinkDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'CONTACT_LINK' (" + //
				"'TOPIC' TEXT PRIMARY KEY NOT NULL ," + // 0: topic
				"'CONTACT_ID' INTEGER NOT NULL );"); // 1: contactId
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'CONTACT_LINK'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, ContactLink entity) {
		stmt.clearBindings();
		stmt.bindString(1, entity.getTopic());
		stmt.bindLong(2, entity.getContactId());
	}

	/** @inheritdoc */
	@Override
	public String readKey(Cursor cursor, int offset) {
		return cursor.getString(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public ContactLink readEntity(Cursor cursor, int offset) {
		ContactLink entity = new ContactLink( //
				cursor.getString(offset + 0), // topic
				cursor.getLong(offset + 1) // contactId
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, ContactLink entity, int offset) {
		entity.setTopic(cursor.getString(offset + 0));
		entity.setContactId(cursor.getLong(offset + 1));
	}

	/** @inheritdoc */
	@Override
	protected String updateKeyAfterInsert(ContactLink entity, long rowId) {
		return entity.getTopic();
	}

	/** @inheritdoc */
	@Override
	public String getKey(ContactLink entity) {
		if (entity != null) {
			return entity.getTopic();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
