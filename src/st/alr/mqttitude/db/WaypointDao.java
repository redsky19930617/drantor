package st.alr.mqttitude.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table WAYPOINT.
 */
public class WaypointDao extends AbstractDao<Waypoint, Long> {

	public static final String TABLENAME = "WAYPOINT";

	/**
	 * Properties of entity Waypoint.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id",
				true, "_id");
		public final static Property Description = new Property(1,
				String.class, "description", false, "DESCRIPTION");
		public final static Property Latitude = new Property(2, Double.class,
				"latitude", false, "LATITUDE");
		public final static Property Longitude = new Property(3, Double.class,
				"longitude", false, "LONGITUDE");
		public final static Property Radius = new Property(4, Float.class,
				"radius", false, "RADIUS");
		public final static Property GeofenceId = new Property(5, String.class,
				"geofenceId", false, "GEOFENCE_ID");
		public final static Property Notification = new Property(6,
				Boolean.class, "notification", false, "NOTIFICATION");
		public final static Property TransitionType = new Property(7,
				Integer.class, "transitionType", false, "TRANSITION_TYPE");
		public final static Property NotificationTitle = new Property(8,
				String.class, "notificationTitle", false, "NOTIFICATION_TITLE");
		public final static Property Shared = new Property(9, Boolean.class,
				"shared", false, "SHARED");
		public final static Property Date = new Property(10,
				java.util.Date.class, "date", false, "DATE");
	};

	public WaypointDao(DaoConfig config) {
		super(config);
	}

	public WaypointDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'WAYPOINT' (" + //
				"'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
				"'DESCRIPTION' TEXT," + // 1: description
				"'LATITUDE' REAL," + // 2: latitude
				"'LONGITUDE' REAL," + // 3: longitude
				"'RADIUS' REAL," + // 4: radius
				"'GEOFENCE_ID' TEXT," + // 5: geofenceId
				"'NOTIFICATION' INTEGER," + // 6: notification
				"'TRANSITION_TYPE' INTEGER," + // 7: transitionType
				"'NOTIFICATION_TITLE' TEXT," + // 8: notificationTitle
				"'SHARED' INTEGER," + // 9: shared
				"'DATE' INTEGER);"); // 10: date
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'WAYPOINT'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, Waypoint entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String description = entity.getDescription();
		if (description != null) {
			stmt.bindString(2, description);
		}

		Double latitude = entity.getLatitude();
		if (latitude != null) {
			stmt.bindDouble(3, latitude);
		}

		Double longitude = entity.getLongitude();
		if (longitude != null) {
			stmt.bindDouble(4, longitude);
		}

		Float radius = entity.getRadius();
		if (radius != null) {
			stmt.bindDouble(5, radius);
		}

		String geofenceId = entity.getGeofenceId();
		if (geofenceId != null) {
			stmt.bindString(6, geofenceId);
		}

		Boolean notification = entity.getNotification();
		if (notification != null) {
			stmt.bindLong(7, notification ? 1l : 0l);
		}

		Integer transitionType = entity.getTransitionType();
		if (transitionType != null) {
			stmt.bindLong(8, transitionType);
		}

		String notificationTitle = entity.getNotificationTitle();
		if (notificationTitle != null) {
			stmt.bindString(9, notificationTitle);
		}

		Boolean shared = entity.getShared();
		if (shared != null) {
			stmt.bindLong(10, shared ? 1l : 0l);
		}

		java.util.Date date = entity.getDate();
		if (date != null) {
			stmt.bindLong(11, date.getTime());
		}
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public Waypoint readEntity(Cursor cursor, int offset) {
		Waypoint entity = new Waypoint(
				//
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // description
				cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // latitude
				cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // longitude
				cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // radius
				cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // geofenceId
				cursor.isNull(offset + 6) ? null
						: cursor.getShort(offset + 6) != 0, // notification
				cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // transitionType
				cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // notificationTitle
				cursor.isNull(offset + 9) ? null
						: cursor.getShort(offset + 9) != 0, // shared
				cursor.isNull(offset + 10) ? null : new java.util.Date(cursor
						.getLong(offset + 10)) // date
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, Waypoint entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setDescription(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setLatitude(cursor.isNull(offset + 2) ? null : cursor
				.getDouble(offset + 2));
		entity.setLongitude(cursor.isNull(offset + 3) ? null : cursor
				.getDouble(offset + 3));
		entity.setRadius(cursor.isNull(offset + 4) ? null : cursor
				.getFloat(offset + 4));
		entity.setGeofenceId(cursor.isNull(offset + 5) ? null : cursor
				.getString(offset + 5));
		entity.setNotification(cursor.isNull(offset + 6) ? null : cursor
				.getShort(offset + 6) != 0);
		entity.setTransitionType(cursor.isNull(offset + 7) ? null : cursor
				.getInt(offset + 7));
		entity.setNotificationTitle(cursor.isNull(offset + 8) ? null : cursor
				.getString(offset + 8));
		entity.setShared(cursor.isNull(offset + 9) ? null : cursor
				.getShort(offset + 9) != 0);
		entity.setDate(cursor.isNull(offset + 10) ? null : new java.util.Date(
				cursor.getLong(offset + 10)));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(Waypoint entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(Waypoint entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
